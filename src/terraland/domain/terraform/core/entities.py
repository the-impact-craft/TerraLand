from dataclasses import dataclass, field
from enum import Enum
from pathlib import Path
from typing import Optional, List, Literal

from terraland.domain.operation_system.entities import Variable
from terraland.domain.terraform.common.entities import BaseTerraformOutput


# ------------------------------------------------------------------------------------------
# Enums
# ------------------------------------------------------------------------------------------


class TerraformFormatScope(Enum):
    CURRENT_FILE = "current_file"
    ALL_PROJECT = "all_project"


class TerraformInitSettingsAttributes:
    DISABLE_BACKEND = "disable_backend"
    BACKEND_CONFIG = "backend_config"
    BACKEND_CONFIG_PATH = "backend_config_path"
    FORCE_COPY = "force_copy"
    FROM_MODULE = "from_module"
    DISABLE_DOWNLOAD = "disable_download"
    DISABLE_INPUT = "disable_input"
    DISABLE_HOLD_LOCK = "disable_hold_lock"
    PLUGIN_DIRECTORY = "plugin_dir"
    RECONFIGURE = "reconfigure"
    MIGRATE_STATE = "migrate_state"
    UPGRADE = "upgrade"
    IGNORE_REMOTE_VERSION = "ignore_remote_version"
    TEST_DIRECTORY = "test_directory"


class TerraformPlanSettingsAttributes:
    ENV_VARS = "env_vars"
    INLINE_VARS = "inline_vars"
    VAR_FILES = "var_files"
    DESTROY = "destroy"
    REFRESH_ONLY = "refresh_only"
    NO_REFRESH = "norefresh"
    OUT = "out"


class TerraformValidateSettingsAttributes:
    NO_TESTS = "no_tests"
    TEST_DIRECTORY = "test_directory"


class TerraformApplySettingsAttributes:
    AUTO_APPROVE = "auto_approve"
    BACKUP = "backup"
    DISABLE_BACKUP = "disable_backup"
    DESTROY = "destroy"
    DISABLE_LOCK = "disable_lock"
    INPUT = "input"
    STATE = "state"
    STATE_OUT = "state_out"
    PLAN = "plan"
    ENV_VARS = "env_vars"
    INLINE_VARS = "inline_vars"
    VAR_FILES = "var_files"


# ------------------------------------------------------------------------------------------
# Data Classes
# ------------------------------------------------------------------------------------------


@dataclass
class TerraformVersion(BaseTerraformOutput):
    """
    Represents information about a specific Terraform version and its associated details.

    This class provides details regarding the Terraform version, the platform it is
    being used on, the provider selections associated with it, and whether the Terraform
    version is outdated. It is used to encapsulate the data related to Terraform's setup
    and state information.

    Attributes:
        terraform_version (str): The version of Terraform being used.
        platform (str): The platform on which Terraform is being used.
        provider_selections (dict): The provider selections associated with the Terraform version.
        terraform_outdated (bool): A flag indicating whether the Terraform version is outdated.
    """

    terraform_version: str
    platform: str
    provider_selections: dict[str, str]
    terraform_outdated: bool


@dataclass
class TerraformFormatOutput(BaseTerraformOutput):
    """
    Represents the output of Terraform format operations.

    This class is intended to encapsulate the resulting string output obtained
    from Terraform formatting utilities. It can be used to store and process the
    formatted output as needed.

    Attributes:
        output (str): The formatted output obtained from Terraform formatting utilities.
    """

    output: str


@dataclass
class TerraformPlanOutput(BaseTerraformOutput):
    """
    This class represents the output of a Terraform plan operation.

    The TerraformPlanOutput class encapsulates the result of executing a
    Terraform plan, providing an interface to manage and interact with the
    generated plan output string.

    Attributes:
        output (str): The string output generated from the Terraform plan operation.
    """

    output: str


@dataclass
class TerraformInitOutput(BaseTerraformOutput):
    """
    Represents the output produced by the `terraform init` command.

    This class is designed to encapsulate and store the output from the
    initialization process of Terraform. The `terraform init` command
    prepares a working directory containing Terraform configuration files
    for use with Terraform by initializing various settings and backend
    configurations. The output stored in this class can be used for debugging
    or logging purposes.

    Attributes:
        output (str): The raw textual output generated by the `terraform init`
            command.
    """

    output: str


@dataclass
class TerraformValidateOutput(BaseTerraformOutput):
    """
    Represents the output produced by the `terraform validate` command.

    This class is designed to encapsulate and store the output from the
    validation process of Terraform. The `terraform validate` command
    checks the configuration files in the current directory for any
    errors or misconfigurations. The output stored in this class can be
    used for debugging or logging purposes.
    """

    output: str


@dataclass
class TerraformCommand:
    """
    Data class representing a Terraform CLI command with its display name, command value, and keyboard shortcut.

    Attributes:
        name (str): The name of the Terraform command.
        value (str): The value of the Terraform command.
        shortcut (str): The keyboard shortcut for the Terraform command.
    """

    name: str
    value: str
    shortcut: str
    is_terraform_command: bool = True


@dataclass
class FormatScope:
    """
    Represents a configuration scope for formatting in an application.

    This class is used to define the configuration and properties of
    a formatting scope, including its label, shortcut key, activation
    status, and value defining the target scope (such as current file
    or entire project).

    Attributes:
        label (str): The label for the formatting scope.
        shortcut (str): The shortcut key for the formatting scope.
        active (bool): The activation status of the formatting scope.
        value (Literal["current_file", "all_project"]): The value defining the target scope.
    """

    label: str
    shortcut: str
    active: bool
    value: Literal["current_file", "all_project"]


@dataclass
class PlanSettings:
    """
    Represents a request to apply the plan settings.

    This class encapsulates data regarding the application of plan settings in a message.
    It is used for transmitting and processing plan-related instructions. The purpose of
    this class is to provide a structured format for handling plan settings in the application.

    Attributes:
        env_vars: List of environment variables to be set during plan execution
        inline_vars: List of variables to be passed inline during plan execution
        var_files: List of environment variable file paths
        destroy: Flag to indicate if this is a destroy plan
        refresh_only: Flag to indicate if this is a refresh-only plan
        norefresh: Flag to disable refresh during plan
    """

    env_vars: Optional[List[Variable]] = field(default_factory=lambda: [])
    inline_vars: Optional[List[Variable]] = field(default_factory=lambda: [])
    var_files: Optional[List[str]] = field(default_factory=lambda: [])

    destroy: bool = False
    refresh_only: bool = False
    norefresh: bool = False
    out: Optional[str] = None


@dataclass
class InitSettings:
    """
    Holds configuration settings required for initializing an application or a process.

    This dataclass is designed to encapsulate all necessary configuration settings
    for initialization. It ensures easy access, standardization, and maintainability
    by grouping related parameters together.
    """

    disable_backend: bool = False
    backend_config: Optional[dict[str, str]] = field(default_factory=lambda: {})
    backend_config_path: Optional[str | Path] = None
    force_copy: bool = False
    # from_module: Optional[str] = None
    disable_download: bool = False
    disable_input: bool = False
    disable_hold_lock: bool = False
    plugin_dir: Optional[str | Path] = None
    reconfigure: bool = False
    migrate_state: bool = False
    upgrade: bool = False
    ignore_remote_version: bool = False
    test_directory: Optional[str | Path] = None


@dataclass
class ValidateSettings:
    """
    Represents settings used for validation operations.

    This class encapsulates settings related to validation, such as whether tests are
    skipped and the directory where tests are located. It ensures that these settings
    are configurable and can be passed easily across different components that require
    validation setup.
    """

    no_tests: bool = False
    test_directory: Optional[str | Path] = None


@dataclass
class ApplySettings:
    """
    Represents settings configuration for Terraform apply operations.

    This class encapsulates various options and flags that can be set to customize
    and control Terraform apply behavior. It supports multiple features such as
    auto-approval, backup management, state file handling, and other apply-specific
    settings.
    """

    auto_approve: bool = False
    backup: Optional[str | Path] = None
    disable_backup: bool = False
    destroy: bool = False
    disable_lock: bool = False
    # lock_timeout: str = "0s"
    input: bool = False
    # parallelism: int = 10
    state: Optional[str | Path] = None
    state_out: Optional[str | Path] = None
    plan: Optional[List[str | Path]] = None  # Temporary add as list, should be able to limit to a single path

    env_vars: Optional[List[Variable]] = field(default_factory=lambda: [])
    inline_vars: Optional[List[Variable]] = field(default_factory=lambda: [])
    var_files: Optional[List[str]] = field(default_factory=lambda: [])


@dataclass
class FormatSettings:
    """
    Handles configuration settings for text formatting.

    This class is responsible for storing and managing various formatting
    settings such as indentation, line wrapping, and other text layout
    configurations used in text-based applications or tools. These settings
    allow customization to adapt text processing according to specific user
    requirements or system constraints.

    """

    path: Optional[str | Path] = None
